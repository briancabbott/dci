// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: NodeNetworkService.proto

package nodenetworkservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestType int32

const (
	RequestType_Setup    RequestType = 0
	RequestType_Teardown RequestType = 1
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "Setup",
		1: "Teardown",
	}
	RequestType_value = map[string]int32{
		"Setup":    0,
		"Teardown": 1,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_NodeNetworkService_proto_enumTypes[0].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_NodeNetworkService_proto_enumTypes[0]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{0}
}

type ConfigureNetworkingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string      `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	RequestType RequestType `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3,enum=azure.nodenetworkservice.RequestType" json:"request_type,omitempty"`
}

func (x *ConfigureNetworkingRequest) Reset() {
	*x = ConfigureNetworkingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureNetworkingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureNetworkingRequest) ProtoMessage() {}

func (x *ConfigureNetworkingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureNetworkingRequest.ProtoReflect.Descriptor instead.
func (*ConfigureNetworkingRequest) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigureNetworkingRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ConfigureNetworkingRequest) GetRequestType() RequestType {
	if x != nil {
		return x.RequestType
	}
	return RequestType_Setup
}

type ConfigureNetworkingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigureNetworkingResponse) Reset() {
	*x = ConfigureNetworkingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureNetworkingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureNetworkingResponse) ProtoMessage() {}

func (x *ConfigureNetworkingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureNetworkingResponse.ProtoReflect.Descriptor instead.
func (*ConfigureNetworkingResponse) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{1}
}

type PingNodeNetworkServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingRequestMessage string `protobuf:"bytes,1,opt,name=ping_request_message,json=pingRequestMessage,proto3" json:"ping_request_message,omitempty"`
}

func (x *PingNodeNetworkServiceRequest) Reset() {
	*x = PingNodeNetworkServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingNodeNetworkServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingNodeNetworkServiceRequest) ProtoMessage() {}

func (x *PingNodeNetworkServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingNodeNetworkServiceRequest.ProtoReflect.Descriptor instead.
func (*PingNodeNetworkServiceRequest) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{2}
}

func (x *PingNodeNetworkServiceRequest) GetPingRequestMessage() string {
	if x != nil {
		return x.PingRequestMessage
	}
	return ""
}

type PingNodeNetworkServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingResponseMessage string `protobuf:"bytes,1,opt,name=ping_response_message,json=pingResponseMessage,proto3" json:"ping_response_message,omitempty"`
}

func (x *PingNodeNetworkServiceResponse) Reset() {
	*x = PingNodeNetworkServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingNodeNetworkServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingNodeNetworkServiceResponse) ProtoMessage() {}

func (x *PingNodeNetworkServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingNodeNetworkServiceResponse.ProtoReflect.Descriptor instead.
func (*PingNodeNetworkServiceResponse) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{3}
}

func (x *PingNodeNetworkServiceResponse) GetPingResponseMessage() string {
	if x != nil {
		return x.PingResponseMessage
	}
	return ""
}

type ConfigureContainerNetworkingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType        RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=azure.nodenetworkservice.RequestType" json:"request_type,omitempty"`
	ContainerId        string      `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	NetworkNamespaceId string      `protobuf:"bytes,3,opt,name=network_namespace_id,json=networkNamespaceId,proto3" json:"network_namespace_id,omitempty"`
}

func (x *ConfigureContainerNetworkingRequest) Reset() {
	*x = ConfigureContainerNetworkingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureContainerNetworkingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureContainerNetworkingRequest) ProtoMessage() {}

func (x *ConfigureContainerNetworkingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureContainerNetworkingRequest.ProtoReflect.Descriptor instead.
func (*ConfigureContainerNetworkingRequest) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigureContainerNetworkingRequest) GetRequestType() RequestType {
	if x != nil {
		return x.RequestType
	}
	return RequestType_Setup
}

func (x *ConfigureContainerNetworkingRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ConfigureContainerNetworkingRequest) GetNetworkNamespaceId() string {
	if x != nil {
		return x.NetworkNamespaceId
	}
	return ""
}

type ConfigureContainerNetworkingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*ContainerNetworkInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *ConfigureContainerNetworkingResponse) Reset() {
	*x = ConfigureContainerNetworkingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureContainerNetworkingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureContainerNetworkingResponse) ProtoMessage() {}

func (x *ConfigureContainerNetworkingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureContainerNetworkingResponse.ProtoReflect.Descriptor instead.
func (*ConfigureContainerNetworkingResponse) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigureContainerNetworkingResponse) GetInterfaces() []*ContainerNetworkInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type ContainerIPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Ip             string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength   string `protobuf:"bytes,4,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	DefaultGateway string `protobuf:"bytes,5,opt,name=default_gateway,json=defaultGateway,proto3" json:"default_gateway,omitempty"`
}

func (x *ContainerIPAddress) Reset() {
	*x = ContainerIPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerIPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerIPAddress) ProtoMessage() {}

func (x *ContainerIPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerIPAddress.ProtoReflect.Descriptor instead.
func (*ContainerIPAddress) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{6}
}

func (x *ContainerIPAddress) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ContainerIPAddress) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ContainerIPAddress) GetPrefixLength() string {
	if x != nil {
		return x.PrefixLength
	}
	return ""
}

func (x *ContainerIPAddress) GetDefaultGateway() string {
	if x != nil {
		return x.DefaultGateway
	}
	return ""
}

type ContainerNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MacAddress         string                `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NetworkNamespaceId string                `protobuf:"bytes,3,opt,name=network_namespace_id,json=networkNamespaceId,proto3" json:"network_namespace_id,omitempty"`
	Ipaddresses        []*ContainerIPAddress `protobuf:"bytes,4,rep,name=ipaddresses,proto3" json:"ipaddresses,omitempty"`
}

func (x *ContainerNetworkInterface) Reset() {
	*x = ContainerNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeNetworkService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerNetworkInterface) ProtoMessage() {}

func (x *ContainerNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_NodeNetworkService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerNetworkInterface.ProtoReflect.Descriptor instead.
func (*ContainerNetworkInterface) Descriptor() ([]byte, []int) {
	return file_NodeNetworkService_proto_rawDescGZIP(), []int{7}
}

func (x *ContainerNetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerNetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ContainerNetworkInterface) GetNetworkNamespaceId() string {
	if x != nil {
		return x.NetworkNamespaceId
	}
	return ""
}

func (x *ContainerNetworkInterface) GetIpaddresses() []*ContainerIPAddress {
	if x != nil {
		return x.Ipaddresses
	}
	return nil
}

var File_NodeNetworkService_proto protoreflect.FileDescriptor

var file_NodeNetworkService_proto_rawDesc = []byte{
	0x0a, 0x18, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x51, 0x0a, 0x1d, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x54, 0x0a, 0x1e, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x7b, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2a, 0x26, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x32, 0xc7, 0x03, 0x0a, 0x12, 0x4e, 0x6f, 0x64,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x82, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x37, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x3b, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_NodeNetworkService_proto_rawDescOnce sync.Once
	file_NodeNetworkService_proto_rawDescData = file_NodeNetworkService_proto_rawDesc
)

func file_NodeNetworkService_proto_rawDescGZIP() []byte {
	file_NodeNetworkService_proto_rawDescOnce.Do(func() {
		file_NodeNetworkService_proto_rawDescData = protoimpl.X.CompressGZIP(file_NodeNetworkService_proto_rawDescData)
	})
	return file_NodeNetworkService_proto_rawDescData
}

var file_NodeNetworkService_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_NodeNetworkService_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_NodeNetworkService_proto_goTypes = []interface{}{
	(RequestType)(0),                             // 0: azure.nodenetworkservice.RequestType
	(*ConfigureNetworkingRequest)(nil),           // 1: azure.nodenetworkservice.ConfigureNetworkingRequest
	(*ConfigureNetworkingResponse)(nil),          // 2: azure.nodenetworkservice.ConfigureNetworkingResponse
	(*PingNodeNetworkServiceRequest)(nil),        // 3: azure.nodenetworkservice.PingNodeNetworkServiceRequest
	(*PingNodeNetworkServiceResponse)(nil),       // 4: azure.nodenetworkservice.PingNodeNetworkServiceResponse
	(*ConfigureContainerNetworkingRequest)(nil),  // 5: azure.nodenetworkservice.ConfigureContainerNetworkingRequest
	(*ConfigureContainerNetworkingResponse)(nil), // 6: azure.nodenetworkservice.ConfigureContainerNetworkingResponse
	(*ContainerIPAddress)(nil),                   // 7: azure.nodenetworkservice.ContainerIPAddress
	(*ContainerNetworkInterface)(nil),            // 8: azure.nodenetworkservice.ContainerNetworkInterface
}
var file_NodeNetworkService_proto_depIdxs = []int32{
	0, // 0: azure.nodenetworkservice.ConfigureNetworkingRequest.request_type:type_name -> azure.nodenetworkservice.RequestType
	0, // 1: azure.nodenetworkservice.ConfigureContainerNetworkingRequest.request_type:type_name -> azure.nodenetworkservice.RequestType
	8, // 2: azure.nodenetworkservice.ConfigureContainerNetworkingResponse.interfaces:type_name -> azure.nodenetworkservice.ContainerNetworkInterface
	7, // 3: azure.nodenetworkservice.ContainerNetworkInterface.ipaddresses:type_name -> azure.nodenetworkservice.ContainerIPAddress
	1, // 4: azure.nodenetworkservice.NodeNetworkService.ConfigureNetworking:input_type -> azure.nodenetworkservice.ConfigureNetworkingRequest
	5, // 5: azure.nodenetworkservice.NodeNetworkService.ConfigureContainerNetworking:input_type -> azure.nodenetworkservice.ConfigureContainerNetworkingRequest
	3, // 6: azure.nodenetworkservice.NodeNetworkService.PingNodeNetworkService:input_type -> azure.nodenetworkservice.PingNodeNetworkServiceRequest
	2, // 7: azure.nodenetworkservice.NodeNetworkService.ConfigureNetworking:output_type -> azure.nodenetworkservice.ConfigureNetworkingResponse
	6, // 8: azure.nodenetworkservice.NodeNetworkService.ConfigureContainerNetworking:output_type -> azure.nodenetworkservice.ConfigureContainerNetworkingResponse
	4, // 9: azure.nodenetworkservice.NodeNetworkService.PingNodeNetworkService:output_type -> azure.nodenetworkservice.PingNodeNetworkServiceResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_NodeNetworkService_proto_init() }
func file_NodeNetworkService_proto_init() {
	if File_NodeNetworkService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_NodeNetworkService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureNetworkingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeNetworkService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureNetworkingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeNetworkService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingNodeNetworkServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeNetworkService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingNodeNetworkServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeNetworkService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureContainerNetworkingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeNetworkService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureContainerNetworkingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeNetworkService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerIPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeNetworkService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NodeNetworkService_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_NodeNetworkService_proto_goTypes,
		DependencyIndexes: file_NodeNetworkService_proto_depIdxs,
		EnumInfos:         file_NodeNetworkService_proto_enumTypes,
		MessageInfos:      file_NodeNetworkService_proto_msgTypes,
	}.Build()
	File_NodeNetworkService_proto = out.File
	file_NodeNetworkService_proto_rawDesc = nil
	file_NodeNetworkService_proto_goTypes = nil
	file_NodeNetworkService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeNetworkServiceClient is the client API for NodeNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeNetworkServiceClient interface {
	ConfigureNetworking(ctx context.Context, in *ConfigureNetworkingRequest, opts ...grpc.CallOption) (*ConfigureNetworkingResponse, error)
	ConfigureContainerNetworking(ctx context.Context, in *ConfigureContainerNetworkingRequest, opts ...grpc.CallOption) (*ConfigureContainerNetworkingResponse, error)
	PingNodeNetworkService(ctx context.Context, in *PingNodeNetworkServiceRequest, opts ...grpc.CallOption) (*PingNodeNetworkServiceResponse, error)
}

type nodeNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeNetworkServiceClient(cc grpc.ClientConnInterface) NodeNetworkServiceClient {
	return &nodeNetworkServiceClient{cc}
}

func (c *nodeNetworkServiceClient) ConfigureNetworking(ctx context.Context, in *ConfigureNetworkingRequest, opts ...grpc.CallOption) (*ConfigureNetworkingResponse, error) {
	out := new(ConfigureNetworkingResponse)
	err := c.cc.Invoke(ctx, "/azure.nodenetworkservice.NodeNetworkService/ConfigureNetworking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) ConfigureContainerNetworking(ctx context.Context, in *ConfigureContainerNetworkingRequest, opts ...grpc.CallOption) (*ConfigureContainerNetworkingResponse, error) {
	out := new(ConfigureContainerNetworkingResponse)
	err := c.cc.Invoke(ctx, "/azure.nodenetworkservice.NodeNetworkService/ConfigureContainerNetworking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) PingNodeNetworkService(ctx context.Context, in *PingNodeNetworkServiceRequest, opts ...grpc.CallOption) (*PingNodeNetworkServiceResponse, error) {
	out := new(PingNodeNetworkServiceResponse)
	err := c.cc.Invoke(ctx, "/azure.nodenetworkservice.NodeNetworkService/PingNodeNetworkService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeNetworkServiceServer is the server API for NodeNetworkService service.
type NodeNetworkServiceServer interface {
	ConfigureNetworking(context.Context, *ConfigureNetworkingRequest) (*ConfigureNetworkingResponse, error)
	ConfigureContainerNetworking(context.Context, *ConfigureContainerNetworkingRequest) (*ConfigureContainerNetworkingResponse, error)
	PingNodeNetworkService(context.Context, *PingNodeNetworkServiceRequest) (*PingNodeNetworkServiceResponse, error)
}

// UnimplementedNodeNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeNetworkServiceServer struct {
}

func (*UnimplementedNodeNetworkServiceServer) ConfigureNetworking(context.Context, *ConfigureNetworkingRequest) (*ConfigureNetworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureNetworking not implemented")
}
func (*UnimplementedNodeNetworkServiceServer) ConfigureContainerNetworking(context.Context, *ConfigureContainerNetworkingRequest) (*ConfigureContainerNetworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureContainerNetworking not implemented")
}
func (*UnimplementedNodeNetworkServiceServer) PingNodeNetworkService(context.Context, *PingNodeNetworkServiceRequest) (*PingNodeNetworkServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingNodeNetworkService not implemented")
}

func RegisterNodeNetworkServiceServer(s *grpc.Server, srv NodeNetworkServiceServer) {
	s.RegisterService(&_NodeNetworkService_serviceDesc, srv)
}

func _NodeNetworkService_ConfigureNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).ConfigureNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azure.nodenetworkservice.NodeNetworkService/ConfigureNetworking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).ConfigureNetworking(ctx, req.(*ConfigureNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_ConfigureContainerNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureContainerNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).ConfigureContainerNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azure.nodenetworkservice.NodeNetworkService/ConfigureContainerNetworking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).ConfigureContainerNetworking(ctx, req.(*ConfigureContainerNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_PingNodeNetworkService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingNodeNetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).PingNodeNetworkService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azure.nodenetworkservice.NodeNetworkService/PingNodeNetworkService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).PingNodeNetworkService(ctx, req.(*PingNodeNetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeNetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "azure.nodenetworkservice.NodeNetworkService",
	HandlerType: (*NodeNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureNetworking",
			Handler:    _NodeNetworkService_ConfigureNetworking_Handler,
		},
		{
			MethodName: "ConfigureContainerNetworking",
			Handler:    _NodeNetworkService_ConfigureContainerNetworking_Handler,
		},
		{
			MethodName: "PingNodeNetworkService",
			Handler:    _NodeNetworkService_PingNodeNetworkService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "NodeNetworkService.proto",
}
