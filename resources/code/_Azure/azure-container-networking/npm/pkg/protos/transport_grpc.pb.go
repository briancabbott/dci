// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataplaneEventsClient is the client API for DataplaneEvents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataplaneEventsClient interface {
	Connect(ctx context.Context, in *DatapathPodMetadata, opts ...grpc.CallOption) (DataplaneEvents_ConnectClient, error)
}

type dataplaneEventsClient struct {
	cc grpc.ClientConnInterface
}

func NewDataplaneEventsClient(cc grpc.ClientConnInterface) DataplaneEventsClient {
	return &dataplaneEventsClient{cc}
}

func (c *dataplaneEventsClient) Connect(ctx context.Context, in *DatapathPodMetadata, opts ...grpc.CallOption) (DataplaneEvents_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataplaneEvents_ServiceDesc.Streams[0], "/protos.DataplaneEvents/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataplaneEventsConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataplaneEvents_ConnectClient interface {
	Recv() (*Events, error)
	grpc.ClientStream
}

type dataplaneEventsConnectClient struct {
	grpc.ClientStream
}

func (x *dataplaneEventsConnectClient) Recv() (*Events, error) {
	m := new(Events)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataplaneEventsServer is the server API for DataplaneEvents service.
// All implementations must embed UnimplementedDataplaneEventsServer
// for forward compatibility
type DataplaneEventsServer interface {
	Connect(*DatapathPodMetadata, DataplaneEvents_ConnectServer) error
	mustEmbedUnimplementedDataplaneEventsServer()
}

// UnimplementedDataplaneEventsServer must be embedded to have forward compatible implementations.
type UnimplementedDataplaneEventsServer struct {
}

func (UnimplementedDataplaneEventsServer) Connect(*DatapathPodMetadata, DataplaneEvents_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDataplaneEventsServer) mustEmbedUnimplementedDataplaneEventsServer() {}

// UnsafeDataplaneEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataplaneEventsServer will
// result in compilation errors.
type UnsafeDataplaneEventsServer interface {
	mustEmbedUnimplementedDataplaneEventsServer()
}

func RegisterDataplaneEventsServer(s grpc.ServiceRegistrar, srv DataplaneEventsServer) {
	s.RegisterService(&DataplaneEvents_ServiceDesc, srv)
}

func _DataplaneEvents_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DatapathPodMetadata)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataplaneEventsServer).Connect(m, &dataplaneEventsConnectServer{stream})
}

type DataplaneEvents_ConnectServer interface {
	Send(*Events) error
	grpc.ServerStream
}

type dataplaneEventsConnectServer struct {
	grpc.ServerStream
}

func (x *dataplaneEventsConnectServer) Send(m *Events) error {
	return x.ServerStream.SendMsg(m)
}

// DataplaneEvents_ServiceDesc is the grpc.ServiceDesc for DataplaneEvents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataplaneEvents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DataplaneEvents",
	HandlerType: (*DataplaneEventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _DataplaneEvents_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transport.proto",
}
