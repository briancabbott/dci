parameters:
  name: ""
  clusterName: ""

steps:
  - bash: |
      echo $UID
      sudo rm -rf $(System.DefaultWorkingDirectory)/*
    displayName: "Set up OS environment"

  - checkout: self

  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}
        echo "install kubetest2 and gsutils"
        go get github.com/onsi/ginkgo/ginkgo
        go get github.com/onsi/gomega/...
        go install github.com/onsi/ginkgo/ginkgo@latest
        go install sigs.k8s.io/kubetest2@latest
        go install sigs.k8s.io/kubetest2/kubetest2-noop@latest
        go install sigs.k8s.io/kubetest2/kubetest2-tester-ginkgo@latest
        wget https://storage.googleapis.com/pub/gsutil.tar.gz
        tar xfz gsutil.tar.gz
        sudo mv gsutil /usr/local/bin
    name: "installKubetest"
    displayName: "Set up Conformance Tests"

  - script: |
      ls -lah
      pwd
      kubectl cluster-info
      kubectl get po -owide -A
      sudo -E env "PATH=$PATH" make test-integration CNS_VERSION=$(make cns-version) CNI_VERSION=$(make cni-version) INSTALL_CNS=true INSTALL_AZURE_VNET=true
    retryCountOnTaskFailure: 3
    name: "aksswifte2e"
    displayName: "Run AKS Swift E2E"

  - script: |
      echo "Logs will be available as a build artifact"
      ARTIFACT_DIR=$(Build.ArtifactStagingDirectory)/aks-swift-output/
      echo $ARTIFACT_DIR
      sudo rm -rf $ARTIFACT_DIR
      sudo mkdir $ARTIFACT_DIR
      sudo cp test/integration/logs/* $ARTIFACT_DIR
    name: "GetLogs"
    displayName: "Get logs"
    condition: always()

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: aks-swift-output
      pathtoPublish: "$(Build.ArtifactStagingDirectory)/aks-swift-output"
    condition: always()

  - script: |
      echo "Run Service Conformance E2E"
      export PATH=${PATH}:/usr/local/bin/gsutil
      KUBECONFIG=~/.kube/config kubetest2 noop \
        --test ginkgo -- \
        --focus-regex "Services.*\[Conformance\].*"
    name: "servicesConformance"
    displayName: "Run Services Conformance Tests"

  - script: |
      echo "Run HostPort Conformance E2E"
      export PATH=${PATH}:/usr/local/bin/gsutil
      KUBECONFIG=~/.kube/config kubetest2 noop \
        --test ginkgo -- \
        --focus-regex "HostPort.*\[Conformance\].*"
    name: "hostportConformance"
    displayName: "Run HostPort Conformance Tests"

  - script: |
      echo "Run wireserver and metadata connectivity Tests"
      bash test/network/wireserver_metadata_test.sh
    retryCountOnTaskFailure: 3
    name: "WireserverMetadataConnectivityTests"
    displayName: "Run Wireserver and Metadata Connectivity Tests"
  
  - script: |
      cd hack/scripts
      chmod +x async-delete-test.sh
      ./async-delete-test.sh
      if ! [ -z $(kubectl -n kube-system get ds  azure-cns | grep non-existing) ]; then
        kubectl -n kube-system patch daemonset azure-cns --type json -p='[{"op": "remove", "path": "/spec/template/spec/nodeSelector/non-existing"}]'
      fi
    name: "testAsyncDelete"
    displayName: "Verify Async Delete when CNS is down"

  - script: |
      ARTIFACT_DIR=$(Build.ArtifactStagingDirectory)/aks-swift-output/
      echo $ARTIFACT_DIR
      sudo rm -rf $ARTIFACT_DIR
      sudo rm -rf test/integration/logs
    name: "Cleanupartifactdir"
    displayName: "Cleanup artifact dir"
    condition: always()
