apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: spark-driver-cpu-karpenter
  namespace: karpenter # Same namespace as Karpenter add-on installed
spec:
  kubeletConfiguration:
    containerRuntime: containerd
#    maxPods: 20
  requirements:
    - key: "karpenter.sh/capacity-type"
      operator: In
      values: ["on-demand"]
    - key: "topology.kubernetes.io/zone"
      operator: In
      values: [${azs}b] #Update the correct region and zone
    - key: "karpenter.k8s.aws/instance-family"
      operator: In
      values: ["m5"]
    - key: "karpenter.k8s.aws/instance-size"
      operator: In
      values: [ "xlarge", "2xlarge", "4xlarge", "8xlarge"]
    - key: "kubernetes.io/arch"
      operator: In
      values: ["amd64"]
  providerRef:
    name: spark-driver-cpu-karpenter
  labels:
    type: karpenter
    provisioner: spark-driver-cpu-karpenter
    NodeGroupType: spark-driver-cpu-karpenter
  taints:
    - key: spark-driver-cpu-karpenter
      value: 'true'
      effect: NoSchedule
  ttlSecondsAfterEmpty: 120 # optional, but never scales down if not set

---
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: spark-driver-cpu-karpenter
  namespace: karpenter
spec:
  amiFamily: Ubuntu
  blockDeviceMappings:
    - deviceName: /dev/sda1
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        encrypted: true
        deleteOnTermination: true
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  subnetSelector:
    Name: "${eks_cluster_id}-private*"        # Name of the Subnets to spin up the nodes
  securityGroupSelector:                      # required, when not using launchTemplate
    Name: "${eks_cluster_id}-node*"           # name of the SecurityGroup to be used with Nodes
  #  instanceProfile: ""      # optional, if already set in controller args

  tags:
    InstanceType: "spark-driver-cpu-karpenter"    # optional, add tags for your own use
